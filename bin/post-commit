#!/usr/bin/env bash
set -eu

NORMAL=$(tput sgr0)
BOLD=$(tput bold)

MESSAGE="$(git log -1 HEAD --pretty=format:%s)"
VER_PATH="$(git rev-parse --show-toplevel)/.version"

VER_STR=$(cat "$VER_PATH")

VER_MAJ=$(echo $VER_STR | awk -F. '{print $1}')
VER_MIN=$(echo $VER_STR | awk -F. '{print $2}')
VER_PAT=$(echo $VER_STR | awk -F. '{print $3}')

GIT_DIR="$(git rev-parse --git-dir)"
HOOK="$GIT_DIR/hooks/post-commit"

applyVersion() {
  VER_STR=$VER_MAJ"."$VER_MIN"."$VER_PAT
  echo $VER_STR > $VER_PATH

  # disable post-commit hook temporarily and ammend the last commit with the latest version
  [ -x $HOOK ] && chmod -x $HOOK
  set +e
  git add $VER_PATH
  git commit --amend --no-edit -q
  chmod +x $HOOK
  set -e
  echo "${BOLD}tcp-glue version: $VER_STR${NORMAL}"
}

onVMAJ() {
  echo "${BOLD}Bumping major version from ${VER_MAJ} -> $((${VER_MAJ} + 1))${NORMAL}"
  VER_MAJ=$((${VER_MAJ} + 1))
  VER_MIN=0
  VER_PAT=0
  applyVersion
}

onVMIN() {
  echo "${BOLD}Bumping minor version from ${VER_MIN} -> $((${VER_MIN} + 1))${NORMAL}"
  VER_MIN=$((${VER_MIN} + 1))
  VER_PAT=0
  applyVersion
}

onVPAT() {
  echo "${BOLD}Bumping patch version from ${VER_PAT} -> $((${VER_PAT} + 1))${NORMAL}"
  VER_PAT=$((${VER_PAT} + 1))
  applyVersion
}

# If .version is already in the files changed, don't bump the version
CHANGED=`git diff HEAD@{1} --stat -- $VER_PATH | wc -l`
if [ $CHANGED -gt 0 ]; then
  echo "${BOLD}tcp-glue version was already manually bumped: $(cat $VER_PATH)${NORMAL}"
  exit
fi

case "$MESSAGE" in
  *major++* ) onVMAJ;;
  *minor++* ) onVMIN;;
  *patch++* ) onVPAT;;
  * )         onVPAT;;
esac

exit